version: 2.1
jobs:
  build: # テストを行うworkflow
    docker:
      - image: circleci/php:7.2.15-fpm
      - image: circleci/mysql:5.7
        environment: # MySQLの初期設定
          MYSQL_USER: docker
          MYSQL_PASSWORD: docker
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: test_setup # テストを行うために必要なライブラリなどのインストール
          command: |
            sudo apt-get update && sudo apt-get install -y libpng-dev libjpeg-dev mariadb-client
            sudo docker-php-ext-configure gd --with-png-dir=/usr/include --with-jpeg-dir=/usr/include
            sudo docker-php-ext-install pdo_mysql gd
      - restore_cache: # composer.jsonのキャッシュがあれば利用
          keys:
          - v1-dependencies-{{ checksum "composer.json" }}
      - run:
          name: composer install
          command: composer install -n --prefer-dist
      - save_cache: # composer.jsonをキャッシュ
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}
      - run: # envファイルをcircleci用のものに変更
          name: env_copy
          command: ln -s .env.circle .env.testing
      - run:
          name: wait mysql
          command: |
            dockerize -wait tcp://127.0.0.1:3306 -timeout 60s
            mysql -h 127.0.0.1 -u root --execute="SELECT 1 as value FROM DUAL WHERE true"
            mysql -h 127.0.0.1 -u root --execute="SHOW databases"
      - run:
          name: migration
          command: php artisan migrate --env=circle --database=mysql --seed
      - run:
          name: test_run
          command: ./vendor/bin/phpunit --testdox
  deploy:
    docker:
      - image: circleci/php:7.3-node-browsers
    environment:
      AWS_DEFAULT_REGION: ap-northeast-1
    steps:
      - checkout
      - run: sudo composer self-update --1
      - restore_cache:
          key: composer-no-dev-v1-{{ checksum "composer.lock" }}
      - run: composer install -n --no-dev --prefer-dist
      - save_cache:
          key: composer-no-dev-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor
      - restore_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}
      - run:
          name: npm ci
          command: |
            if [ ! -d node_modules ]; then
              npm ci
            fi
      - save_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: archive artifacts
          command: zip -ryq menscosme.zip .
      - aws-cli/install
      - run:
          name: upload artifacts to s3
          command: aws s3 cp menscosme.zip s3://${AWS_S3_BUCKET_NAME}
      - run:
          name: deploy to prod
          command: |
            aws deploy create-deployment \
            --application-name menscosme \
            --deployment-group-name menscosme \
            --s3-location bucket=${AWS_S3_BUCKET_NAME},key=menscosme.zip,bundleType=zip
  deploy_tmp:
  docker:
    - image: circleci/php:7.2.15-fpm
  steps:
    - checkout
    - add_ssh_keys
    - run:
        name: deploy to prod
        command: |
          echo -e "Host git-codecommit.*.amazonaws.com\n   User ${AWS_SSH_KEY_ID}\n   StrictHostKeyChecking no" > ${HOME}/.ssh/config
          git push ssh://git-codecommit.ap-northeast-1.amazonaws.com/v1/repos/menscosme

orbs:
  aws-cli: circleci/aws-cli@1.0.0
workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - main
      - deploy_tmp:
          requires:
            - build
          filters:
            branches:
              only:
                - main